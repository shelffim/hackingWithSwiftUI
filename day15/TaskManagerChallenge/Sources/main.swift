import Foundation

// --- 데이터 구조 설계 공간 ---
// 여기에 작업(Task)과 관련된 데이터 타입을 직접 설계해보세요.
// 예를 들어, 작업의 상태(Status), 우선순위(Priority)를 표현할 열거형(enum)이나
// 작업 자체를 나타낼 구조체(struct)를 만들 수 있습니다.



// --- 작업 관리자 구현 공간 ---
// 설계한 데이터 구조를 바탕으로 작업 관리자(TaskManager)를 구현하세요.
// TaskManager는 작업들을 저장하고 관리하는 여러 메서드를 가집니다.

struct TaskManager {
    // TODO: 작업들을 저장할 컬렉션을 선언하세요. (예: [Task])

    // TODO: 요구 기능에 명시된 메서드들을 구현하세요.
    // 1. 새로운 작업 추가
    // 2. 작업 상태 변경
    // 3. 전체 작업 목록 보기
    // 4. 우선순위로 필터링하기
    // 5. 완료된 작업 삭제
    // 6. (도전 과제) 마감 임박 작업 찾기
}


// --- 실행 및 테스트 공간 ---
// 이 아래 부분에 테스트 코드를 작성하여 구현한 기능들을 검증하세요.

print("개인 작업 관리자를 시작합니다.")

// 1. TaskManager 인스턴스 생성
// var myTaskManager = TaskManager()

// 2. 여러 작업 추가 테스트


// 3. 전체 목록 출력 테스트


// 4. 작업 상태 변경 테스트


// 5. 우선순위 필터링 테스트


// 6. 완료된 작업 삭제 테스트


// 7. (도전 과제) 마감 임박 작업 찾기 테스트